{
  "version": "V_2",
  "groups": [
    {
      "id": "0",
      "label": "默认页",
      "path": "index",
      "layout": {
        "type": "column",
        "children": [
          {
            "type": "row",
            "source": "ROW",
            "parameters": {
              "alignment": "bootstrap"
            },
            "style": {},
            "children": [
              {
                "type": "column",
                "children": [
                  {
                    "label": "控制板1",
                    "type": "block",
                    "source": "BLOCK",
                    "style": {
                      "padding": "5px",
                      "border": "0",
                      "min-height": "calc(100vh - 150px)",
                      "background": "rgba(0,0,0,.6)"
                    },
                    "advance": {
                      "expression": {}
                    },
                    "children": [
                      {
                        "type": "column",
                        "col": 12,
                        "children": [
                          {
                            "label": "控件组",
                            "type": "ctrlgroup",
                            "source": "CTRLGROUP",
                            "advance": {
                              "expression": "expression = {\n  on : {\n    init : function(event){\n      var target = event.target;\n      var global = event.global;\n      var kpiOption = [{\n          id : 1002,\n          label : \"报警数量\"\n        },{\n          id : 1003,\n          label : \"报警准确率\"\n        },{\n          id : 1004,\n          label : \"判断及时率\"\n        },{\n          id : 1005,\n          label : \"诊断准确率\"\n        }];;\n        var categoryOption = [{\n          id : 0,\n          label : \"按设备列别\"\n        },{\n          id : 1,\n          label : \"按专业们类\"\n        },{\n          id : 2,\n          label : \"按故障类别\"\n        },{\n          id : 3,\n          label : \"按状态级别\"\n        }];\n        var valKpi = [kpiOption[0]];\n        var valCat = [categoryOption[0]];\n        target.setValue(\"decider/kpi\", valKpi);\n        target.setValue(\"decider/category\", valCat);\n        var render = function(){\n          var ctrlGroups = [\n            [{\n              type : \"label\",\n              value : \"指标\"\n            }],\n            [{\n              type : \"checkboxlist\",\n              value : valKpi.map(function(elem){\n                return elem.id;\n              }),\n              on : {\n                change : function(elem){\n                  valKpi = elem.value;\n                  target.setValue(\"decider/kpi\", valKpi);\n                  render();\n                }\n              },\n              options : kpiOption\n            }],\n            [{\n              type : \"label\",\n              value : \"分类\"\n            }],\n            [{\n              type : \"checkboxlist\",\n              value : valCat.map(function(elem){\n                return elem.id;\n              }),\n              on : {\n                change : function(elem){\n                  valCat = elem.value;\n                  target.setValue(\"decider/category\", valCat);\n                  render();\n                }\n              },\n              options : categoryOption\n            }]\n          ];\n          target.render(ctrlGroups);\n        }\n        render();\n    }\n  }\n}"
                            },
                            "style": {
                              "margin": "5px",
                              "font-size": "12px"
                            },
                            "help": "../pdf/ctrlgroup.pdf",
                            "parameters": {},
                            "url": "images/map/map1.png"
                          }
                        ]
                      }
                    ]
                  }
                ],
                "col": 2
              },
              {
                "type": "column",
                "children": [
                  {
                    "label": "控制板1",
                    "type": "block",
                    "source": "BLOCK",
                    "style": {
                      "padding": "15px",
                      "margin": "5px"
                    },
                    "advance": {
                      "expression": "{}"
                    },
                    "children": [
                      {
                        "type": "column",
                        "col": 12,
                        "children": [
                          {
                            "label": "控件组",
                            "type": "ctrlgroup",
                            "source": "CTRLGROUP",
                            "advance": {
                              "expression": "expression = {\n  bootstrap : false,\n  width : \"auto\",\n  on : {\n    init : function(event){\n      var target = event.target;\n      var global = event.global;\n      var CURRENTDATE = target.dateHandler(new Date());\n      var FROMTODAY = target.dateHandler(CURRENTDATE.trimmToDate());\n      var FROMWEEK = target.dateHandler(CURRENTDATE.trimmToWeek());\n      var FROMMONTH = target.dateHandler(CURRENTDATE.trimmToMonth());\n      var ALLBASE = {\n        id : 0,\n        label : \"全部\"\n      };\n      var ALLAREA = {\n        id : 0,\n        label : \"全部\"\n      };\n      var ALLLINE = {\n        id : 0,\n        label : \"全部\"\n      }\n      var currentBase = ALLBASE, currentArea = {}, currentLine = {}, time = [FROMTODAY, CURRENTDATE];\n      var isSame = function(time, arr){\n        var t1 = time[0].getTime();\n        var t2 = time[1].getTime();\n        var a1 = arr[0].getTime();\n        var a2 = arr[1].getTime();\n        return t1 == a1 && t2 == a2;\n      }\n      var bases = [];\n      var areas = [];\n      var lines = [];\n      target.queryDomainTree(function(domaintree){\n        target.getResourceByModelId(301, function(customers){\n          var repeat = function(node){\n            if(node.domainInfos){\n              for(var i in node.domainInfos){\n                repeat(node.domainInfos[i]);\n              }\n            } else {\n              node.domainInfos = customers.filter(function(customer){\n                return customer.domains.indexOf(node.domains) != -1;\n              });\n            }\n          }\n          repeat(domaintree[0]);\n          bases = domaintree[0].domainInfos;\n          ALLBASE.data = bases;\n          var timeStr = time.map(function(elem){\n            return elem.getDate();\n          });\n          var render = function(){\n            target.setValue(\"decider/base\", currentBase);\n            target.setValue(\"decider/area\", currentArea);\n            target.setValue(\"decider/line\", currentLine);\n            target.setValue(\"decider/time\", time);\n            var baseGr = [ALLBASE].concat(bases).map(function(base){\n              var rs = base.$clone();\n              rs.type = \"button\";\n              //rs.class = \"col-md-2\";\n              rs.btnclass = currentBase.id == base.id ? \"btn btn-primary\" : \"btn btn-default\";\n              rs.btnStyle = {\n                width : \"150px\"\n              };\n              rs.format = {\n                id : \"id\",\n                label : \"label\"\n              };\n              rs.on = {\n                click : function(event){\n                  currentBase = event.current;\n                  lines = [];\n                  currentLine = {};\n                  if(currentBase.id != 0){\n                    ALLAREA.data = currentBase.domainInfos;\n                    areas = currentBase.domainInfos\n                    currentArea = ALLAREA;\n                  } else {\n                    areas = [];\n                  };\n                  render();\n                }\n              }\n              return rs;\n            });\n            var areaGr = [ALLAREA].concat(areas).map(function(area){\n              var rs = area.$clone();\n              rs.type = \"button\";\n              rs.btnclass = currentArea.id == area.id ? \"btn btn-primary\" : \"btn btn-default\";\n              rs.format = {\n                id : \"id\",\n                label : \"label\"\n              };\n              rs.btnStyle = {\n                width : \"150px\"\n              };\n              //rs.class = \"col-md-2\";\n              rs.on = {\n                click : function(event){\n                  currentArea = event.current;\n                  if(currentArea.id != 0){\n                    ALLLINE.data = currentArea.domainInfos;\n                    lines = currentArea.domainInfos;\n                    currentLine = ALLLINE;\n                  } else {\n                    lines = [];\n                  };\n                  render();\n                }\n              }\n              return rs;\n            });\n            var lineGr = [ALLLINE].concat(lines).map(function(line){\n              var rs = line.$clone();\n              rs.type = \"button\";\n              rs.btnStyle = {\n                width : \"150px\"\n              };\n              rs.btnclass = currentLine.id == line.id ? \"btn btn-primary\" : \"btn btn-default\";\n              rs.format = {\n                id : \"id\",\n                label : \"label\"\n              };\n              //rs.class = \"col-md-2\";\n              rs.on = {\n                click : function(event){\n                  currentLine = event.current;\n                  render();\n                }\n              }\n              return rs;\n            });\n            \n            var ctrlGroups = [\n              [{\n                  type : \"button\",\n                  value : \"\",\n                  rowSpan : 4,\n                  icon : \"glyphicon glyphicon-search\",\n                  btnclass : \"btn btn-primary\",\n                  style : {\n                      \"text-align\" : \"center\",\n                      \"padding\" : \"10px 0\"\n                  },\n                  btnStyle : {\n                      \"background-color\" : \"#1370cb\",\n                      \"font-size\" : \"30px\",\n                      \"padding\" : \"3px 12px\",\n                      \"border-radius\" : \"10px\",\n                      \"border\" : 0,\n                      \"margin\" : \"auto\"\n                  },\n                  class : \"col-md-2\",\n                  on : {\n                    click : function(elem){\n                        target.trigger(\"startSearch\");\n                    }\n                  }\n                },{\n                type : \"label\",\n                value : \"基地\",\n                //class : \"col-md-1\"\n              }].concat(baseGr)\n            ];\n            if(areaGr.length > 1){\n              var are = [{\n                type : \"label\",\n                value : \"区域\",\n                //class : \"col-md-1\"\n              }].concat(areaGr)\n              ctrlGroups.push(are);\n            };\n            if(lineGr.length > 1){\n              var li = [{\n                type : \"label\",\n                value : \"产线\",\n                //class : \"col-md-1\"\n              }].concat(lineGr)\n              ctrlGroups.push(li);\n            }\n            var timeSelector =  [{\n              type : \"label\",\n              value : \"时间\"\n            },{\n              type : \"button\",\n              value : \"当日\",\n              btnStyle : {\n                width : \"150px\"\n              },\n              btnclass : isSame(time,[FROMTODAY, CURRENTDATE]) ? \"btn btn-primary\" : \"btn btn-default\",\n              on : {\n                click : function(event){\n                  time = [FROMTODAY, CURRENTDATE];\n                  render();\n                }\n              }\n            },{\n              type : \"button\",\n              value : \"本周\",\n              btnStyle : {\n                width : \"150px\"\n              },\n              btnclass :isSame(time,[FROMWEEK, CURRENTDATE]) ? \"btn btn-primary\" : \"btn btn-default\",\n              on : {\n                click : function(event){\n                  time = [FROMWEEK, CURRENTDATE];\n                  render();\n                }\n              }\n            },{\n              type : \"button\",\n              value : \"本月\",\n              btnStyle : {\n                width : \"150px\"\n              },\n              btnclass : isSame(time,[FROMMONTH, CURRENTDATE]) ? \"btn btn-primary\" : \"btn btn-default\",\n              on : {\n                click : function(event){\n                  time = [FROMMONTH, CURRENTDATE];\n                  render();\n                }\n              }\n            },{\n              type : \"dateRangePicker\",\n              value : time.map(function(elem){\n                var rs = elem.getDate();\n                return rs;\n              }),\n              on : {\n                change : function(event){\n                  time = [target.dateHandler(event.value.start),target.dateHandler(event.value.end)];\n                  render();\n                }\n              },\n              style : {\n                width : \"250px\"\n              }\n            }]\n            ctrlGroups.push(timeSelector);\n            target.render(ctrlGroups);\n          };\n          render();\n          target.wait(function(){\n              var events = target.getEvents();\n              return events['startSearch']['echart'] && events['startSearch']['list'] && events['startSearch']['text'];\n          }, function(){\n              target.trigger(\"startSearch\");\n          });\n        })\n      });\n    }\n  }\n}"
                            },
                            "style": {
                              "margin": "5px",
                              "font-size": "12px"
                            },
                            "help": "../pdf/ctrlgroup.pdf",
                            "parameters": {}
                          }
                        ]
                      }
                    ],
                    "parameters": {}
                  },
                  {
                    "label": "控制板1",
                    "type": "block",
                    "source": "BLOCK",
                    "style": {
                      "padding": "15px",
                      "margin": "5px"
                    },
                    "advance": {
                      "expression": {}
                    },
                    "children": [
                      {
                        "type": "column",
                        "col": 12,
                        "children": [
                          {
                            "label": "文字",
                            "type": "text",
                            "source": "TEXT",
                            "help": "http://localhost/app-free-style/index.html#/help/index%7Ctext/%5B%220%22,%7B%7D%5D",
                            "style": {
                              "padding": "0",
                              "font-size": "14px",
                              "font-weight": "bold"
                            },
                            "advance": {
                              "expression": "expression = {\n    on : {\n        init : function(event){\n            var target = event.target;\n            target.setText(\"查询结果\")\n        }\n    }\n}"
                            },
                            "data": {
                              "modelType": 300,
                              "resfilltype": "parameter",
                              "modelDisable": true
                            },
                            "url": "images/map/map1.png"
                          },
                          {
                            "label": "控件组",
                            "type": "ctrlgroup",
                            "source": "CTRLGROUP",
                            "advance": {
                              "expression": "expression = {\n  on : {\n    init : function(event){\n      var target = event.target;\n      var render = function(str){\n          var ctrlGroups = [\n           [{\n               type : \"label\",\n               value : str,\n               class : \"col-md-8\",\n           },{\n              type : \"button\",\n              value : \"导出\",\n              icon : \"glyphicon glyphicon-search\",\n              btnclass : \"btn btn-primary pull-right\",\n              class : \"col-md-4\",\n              on : {\n                click : function(elem){\n                  console.log(\"123\");\n                }\n              }\n            }]\n          ];\n          target.render(ctrlGroups);\n      };\n      render(\"全部\");\n      target.off(\"startSearch.text\");\n      target.on(\"startSearch.text\", function(){\n        var decider = target.getValue(\"decider\");\n        var getString = function(){\n          var base = decider.base;\n          var area = decider.area;\n          var line = decider.line;\n          if(base.id == 0){\n            str = \"全部\";\n            return str;\n          } else {\n            str  = base.label;\n          }\n          if(area.id == 0){\n            str += \" / 全部\"\n            return str\n          } else {\n            str  += \" / \" + area.label;\n          }\n          if(line.id == 0){\n            str += \" / 全部\"\n            return str\n          } else {\n            str += \" / \" + line.label;\n          }\n          return str;\n        }\n        var kpi = decider.kpi;\n        var str = getString();\n        if(kpi.length > 0){\n          str += \"   (\" + kpi.map(function(elem){\n              return elem.label\n            }).toString() + \")   \";\n        };\n        var time = decider.time;\n        str += time.map(function(elem){\n            return elem.getDateString(\"yy/MM/dd\");\n        }).toString().replace(\",\",\"  -  \");\n        render(str);\n      });\n    }\n  }\n}"
                            },
                            "style": {
                              "margin": "5px",
                              "font-size": "12px"
                            },
                            "help": "../pdf/ctrlgroup.pdf",
                            "parameters": {}
                          },
                          {
                            "label": "高级列表",
                            "type": "dataTableAdvance",
                            "source": "DATATABLEADVANCE",
                            "parameters": {
                              "col": 1,
                              "pageSize": 10,
                              "listbottom": "standard"
                            },
                            "advance": {
                              "expression": "expression = {\n  \"on\" : {\n    \"init\" : function(event){\n      var target = event.target;\n      target.on(\"startSearch.list\", function(){\n        var decider = target.getValue(\"decider\");\n        var domains = decider.domains;\n        var time = decider.time;\n        var getDomain = function(){\n            var base = decider.base;\n            var area = decider.area;\n            var line = decider.line;\n            if(base.id == 0){\n                return base.data\n            };\n            if(area.id == 0){\n                return area.data;\n            };\n            if(line.id == 0){\n                return line.data;\n            } else {\n                return [line]\n            }\n        }\n        var domains = getDomain();\n        var Dic = {\n            ext : \"范围\",\n            a : \"电机\",\n            b : \"电器柜\",\n            c : \"风机\",\n            d : \"泵\",\n            e : \"齿轮箱\",\n            f : \"液压系统\",\n            g : \"传动轴\"\n        }\n        var simData = {\n            ext : function(inx, target){\n                    return domains[inx].label\n                },\n            a : function(inx, target){\n                    return target.random(100, 2);\n                },\n            b : function(inx, target){\n                    return target.random(100, 2);\n                },\n            c : function(inx, target){\n                    return target.random(100, 2);\n                },\n            d : function(inx, target){\n                    return target.random(100, 2);\n                },\n            e : function(inx, target){\n                    return target.random(100, 2);\n                },\n            f : function(inx, target){\n                    return target.random(100, 2);\n                },\n            g : function(inx, target){\n                    return target.random(100, 2);\n                }\n        }\n        target.getSimulateApi(simData, domains.length, function(data){\n            var format = [];\n            for(var i in Dic){\n                format.push({\n                    type : \"link\",\n                    name : Dic[i],\n                    value : i,\n                    on : {\n                        click : function(event){\n                            target.createSystemPopupByLocalPath(\"popup\", {\n                                title : Dic[i] + \"(\" + time[0].getDateString(\"yy/MM/dd\") + \"至\" + time[1].getDateString(\"yy/MM/dd\") + \")数据统计\",\n                                width : \"600px\"\n                            }, {\n                                domains : domains,\n                                attribute : Dic[i],\n                                time : time\n                            })\n                        }\n                    }\n                })\n            }\n            var source = {\n                data : data,\n                format : format\n            };\n            target.render(source);\n        })\n      });\n    }\n  }\n}"
                            },
                            "style": {
                              "margin": "5px",
                              "font-size": "12px"
                            }
                          }
                        ]
                      }
                    ]
                  },
                  {
                    "label": "控制板1",
                    "type": "block",
                    "source": "BLOCK",
                    "style": {
                      "padding": "15px",
                      "margin": "5px"
                    },
                    "advance": {
                      "expression": {}
                    },
                    "children": [
                      {
                        "type": "column",
                        "col": 12,
                        "children": [
                          {
                            "label": "高级视图",
                            "type": "advanceEchart",
                            "source": "ADVANCEECHART",
                            "parameters": {
                              "theme": "auto"
                            },
                            "advance": {
                              "expression": "express = {\n  on : {\n    init : function(event){\n      var target = event.target;\n      target.off(\"startSearch.echart\");\n      target.on(\"startSearch.echart\", function(){\n        var decider = target.getValue(\"decider\");\n        var getDomain = function(){\n          var base = decider.base;\n          var area = decider.area;\n          var line = decider.line;\n          if(base.id == 0){\n            return base.data\n          };\n          if(area.id == 0){\n            return area.data;\n          };\n          if(line.id == 0){\n            return line.data;\n          } else {\n            return [line]\n          }\n        }\n        var domains = getDomain();\n        var Dic = {\n          ext : \"范围\",\n          a : \"电机\",\n          b : \"电器柜\",\n          c : \"风机\",\n          d : \"泵\",\n          e : \"齿轮箱\",\n          f : \"液压系统\",\n          g : \"传动轴\"\n        }\n        var simData = {\n          ext : function(inx, target){\n            return domains[inx].label\n          },\n          a : function(inx, target){\n            return target.random(100, 2);\n          },\n          b : function(inx, target){\n            return target.random(100, 2);\n          },\n          c : function(inx, target){\n            return target.random(100, 2);\n          },\n          d : function(inx, target){\n            return target.random(100, 2);\n          },\n          e : function(inx, target){\n            return target.random(100, 2);\n          },\n          f : function(inx, target){\n            return target.random(100, 2);\n          },\n          g : function(inx, target){\n            return target.random(100, 2);\n          }\n        }\n        target.getSimulateApi(simData, domains.length, function(data){\n          var lg = [];\n          for(var i in Dic){\n              if(i != 'ext'){\n                  lg.push(Dic[i])\n              }\n          }\n          var series = [];\n          for(var i in Dic){\n              if(i != 'ext'){\n                  var inx = 0;\n                  var rs = {\n                      name : Dic[i],\n                      type : \"bar\",\n                      data : domains.map(function(elem){\n                          var rs = data[inx][i];\n                          inx++\n                          return rs\n                      })\n                  };\n                  series.push(rs);\n              }\n          }\n          var option = {\n            tooltip: {\n                trigger : \"axis\"\n            },\n            legend: {\n              data:lg\n            },\n            xAxis: {\n              data: domains.map(function(elem){\n                  return elem.label;\n              })\n            },\n            yAxis: {},\n            series: series\n          };\n          target.render(option);\n        })\n      });\n    }\n  }\n}"
                            },
                            "style": {
                              "margin": "auto",
                              "width": "100%",
                              "height": "300px"
                            }
                          }
                        ]
                      }
                    ]
                  }
                ],
                "col": 10
              }
            ]
          }
        ],
        "col": 12
      },
      "$$hashKey": "object:1319"
    },
    {
      "label": "弹出窗",
      "path": "popup",
      "layout": {
        "type": "column",
        "children": [
          {
            "label": "高级视图",
            "type": "advanceEchart",
            "source": "ADVANCEECHART",
            "parameters": {
              "theme": "auto"
            },
            "advance": {
              "expression": "express = {\n  on : {\n    init : function(event){\n      var NUMBER = 10;\n      var target = event.target;\n      var input = target.getPopupData();\n      var time = input.time;\n      var start = time[0];\n      var startClone = start.clone();\n      var end = time[1];\n      var dif = target.dateHandler(end.minus(start)).getTime() / NUMBER;\n      var xAxis = [];\n      while(startClone.before(end)){\n        var clone = startClone.clone();\n        startClone.addTimeStamp(dif);\n        xAxis.push(clone);\n      };\n      var domains = input.domains;\n      var attribute = input.attribute;\n      debugger;\n      var simData = {\n        nodeId : function(inx, target){\n          return domains[inx % domains.length].id\n        },\n        value : function(inx, target){\n          return target.random(100, 2);\n        },\n        arrisingTime : function(inx, target){\n          var d = Math.floor(inx / domains.length);\n          return xAxis[d].getDateString(\"yy/MM/dd,hh:mm:ss\");\n        }\n      }\n      target.getSimulateApi(simData, NUMBER * domains.length, function(data){\n        var series = domains.map(function(elem){\n          var rs = {\n            name : elem.label,\n            type : \"line\",\n            data : data.filter(function(el){\n              return el.nodeId == elem.id;\n            }).map(function(e){\n              return e.value;\n            })\n          }\n          return rs;\n        });\n        var option = {\n          tooltip: {\n                trigger : \"axis\"\n            },\n          legend: {\n            data:domains.map(function(elem){\n              return elem.label;\n            })\n          },\n          xAxis: {\n            triggerEvent : \"xAxis\",\n            boundaryGap : false,\n            data: xAxis.map(function(elem){\n              return elem.getDateString(\"yy年MM月dd日,hh时\");\n            })\n          },\n          yAxis: {},\n          series: series\n        };\n        debugger;\n        target.render(option);\n      });\n    }\n  }\n}"
            },
            "style": {
              "margin": "auto",
              "width": "100%",
              "height": "300px"
            }
          }
        ],
        "col": 12
      },
      "id": "1",
      "$$hashKey": "object:1353"
    }
  ],
  "setting": "{\n  \"theme\": \"steel\"\n}"
}