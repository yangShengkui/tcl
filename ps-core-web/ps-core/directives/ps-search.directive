<config injector="$q,ajax, psUltility">
</config>
<template>
    <div class="box-body no-padding-left no-pad-bottom">
        <form role="form" name="alertForm">
            <div class="form-group col-sm-2"
                 ng-repeat="attr in attrs">
                <label class="control-label" ng-bind="attr.label"></label>
                <ps-tools option="attr.option"></ps-tools>
            </div>
            
            <div class="form-group col-sm-2 no-pad">
                <label class="col-sm-12 control-label font-white">操作：</label>
                <div class="btn-group">
                    <button type="button" class="btn btn-primary btn-sm" ng-click="goSearch()">
                        <i class="fa fa-search"></i>
                        <span class="hidden-sm"> 查询</span>
                    </button>
                    <button type="button" class="btn btn-default btn-sm" ng-click="goClear()">
                        <i class="fa fa-close"></i>
                        <span class="hidden-sm"> 清除</span>
                    </button>
                </div>
            </div>
        
        </form>
    </div>
</template>
<script type="text/javascript">
export default function (q, ajax, psUltility) {
  return {
    scope: {
      option: '='
    },
    link (scope, element, attr, ngModel) {
      let isType = (type, obj) => Object.prototype.toString.call(obj) === `[object ${type}]`;
      scope.attrs = [];
      scope.goSearch = _ => {
        let obj = {};

        scope.attrs.forEach(d => {
          if (d.option[psUltility.keyPattern(d.option['key'])]) {
            d.option['searchAs'] === 'Array' ? obj[d.option['key']] = [d.option[psUltility.keyPattern(d.option['key'])]] :
              obj[d.option['key']] = d.option[psUltility.keyPattern(d.option['key'])];
          }
        });
        scope.$emit('PS_REFRESH_GRID', obj);
      }
      scope.goClear = _ => {
        scope.attrs.forEach(d => {
          if (d.option[psUltility.keyPattern(d.option['key'])]) {
            d.option = {
              type: d.option['type'],
              config: d.option['config'],
              options: d.option['options'],
              format: d.option['format'],
              key: d.option['key']
            }
          }
        });
      }
      scope.$watch(`option`, (n, o) => {
        if (typeof n !== 'undefined') {
          let promises = n.body.map(d => {
            let defer = q.defer();
            let obj = {};
            obj['label'] = d['label'];
            if (isType('String', d['options'])) {
              ajax.post(d['options'] + '@getByCondition', d['optionsParam'] || {}).then(function (data) {
                obj['option'] = {
                  type: d['searchType'],
                  config: d['config'] || {},
                  options: data,
                  format: d['format'],
                  searchAs: d['searchAs'],
                  key: d['key']
                }
                obj['option']['config']['format'] = d['format'];
                defer.resolve(obj);
              });
            } else {
              obj['option'] = {
                type: d['searchType'],
                config: d['config'] || {},
                options: d['options'],
                searchAs: d['searchAs'],
                key: d['key']
              };
              obj['option']['config']['format'] = d['format'];
              defer.resolve(obj);
            }
            return defer.promise;
          });
          q.all(promises).then(ret => {
            scope.attrs = ret;
          });
        }
      });
    }
  }
}
</script>
<style type="less" scoped="true">
</style>